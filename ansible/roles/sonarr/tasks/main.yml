---

- name: Set EFS mount point to {{ efs_mount_stage }}
  set_fact:
    efs_mount: "{{ efs_mount_stage }}"
  when: env == "stage"

- name: Set EFS mount point to {{ efs_mount_prod }}
  set_fact:
    efs_mount: "{{ efs_mount_prod }}"
  when: env == "prod"

## Create sonarr user and group
- name: Create sonarr group
  group:
    name: "{{ sonarr_group }}"
    state: present
    gid: "{{ sonarr_id }}"

- name: Create sonarr user
  user:
    name: "{{ sonarr_user }}"
    shell: /bin/bash
    state: present
    uid: "{{ sonarr_id }}"
    group: "{{ sonarr_group }}"

## Create downloaders group and add sonarr to it
- name: Create downloader group
  group:
    name: "{{ downloader_group }}"
    state: present
    gid: "{{ downloader_id }}"

- name: Modify sonarr user
  user:
    name: "{{ sonarr_user }}"
    groups: "{{ downloader_group }}"

## Mount shared EFS for Plex config
- name: "Create shared NFS mount point"
  file:
    state: directory
    path: "{{ config_root }}"
    mode: 0755

- name: "Mount shared EFS as NFS"
  mount:
    name: "{{ config_root }}"
    src: "{{ efs_mount }}/"
    state: mounted
    fstype: nfs
    opts: "nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport"

- name: Ensure that Docker waits for EFS to be mounted before starting
  lineinfile:
    dest: /lib/systemd/system/docker.service
    backrefs: True
    state: present
    regexp: '(^After=(\s+(?!mnt-EFS.mount)[\w=/\-\.]+)*)\s*$'
    line: '\1 mnt-EFS.mount'

- name: Ensure that Docker fails if EFS mount fails
  lineinfile:
    dest: /lib/systemd/system/docker.service
    backrefs: True
    state: present
    regexp: '(^Requires=(\s+(?!mnt-EFS.mount)[\w=/\-\.]+)*)\s*$'
    line: '\1 mnt-EFS.mount'

- name: Create sonarr config directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
    owner: "{{ sonarr_user }}"
    group: "{{ sonarr_group }}"
  with_items:
    - "{{ config_sonarr_shared }}"
    - "{{ config_sonarr_shared }}/config"
    - "{{ config_sonarr_local }}/config"

- name: Check if local Sonarr config exists
  stat:
    path: "{{ config_sonarr_local }}/config/config.xml"
  register: sonarr_config

- name: Synchronize sonarr local and shared config
  synchronize:
    src: "{{ config_sonarr_shared }}/config"
    dest: "{{ config_sonarr_local }}"
  delegate_to: "{{ inventory_hostname }}"
  when: sonarr_config.stat.exists == False

- name: Import Sonarr config backup script
  template:
    src: sonarr_backup.sh.j2
    dest: "{{ config_sonarr_local }}/sonarr_backup.sh"
    mode: 0755
    owner: "{{ sonarr_user }}"
    group: "{{ sonarr_group }}"

- name: Cron job to backup radarr config
  cron:
    name: "backup sonarr config"
    special_time: hourly
    job: "{{ config_sonarr_local }}/sonarr_backup.sh"

- name: Create shared directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
  with_items:
    - "{{ config_downloads }}"
    - "{{ config_tv }}"

## Download, configure, and deploy sonarr container
- name: Pull the sonarr docker image
  docker_image:
    name: "linuxserver/sonarr"

- name: Start the sonarr docker container
  docker_container:
    image: "linuxserver/sonarr"
    name: "{{ docker_sonarr_container_name }}"
    env:
      PUID: "{{ sonarr_id }}"
      PGID: "{{ downloader_id }}"
      TZ: 'America/New_York'
    volumes:
      - '{{ config_sonarr_local }}/config:/config'
      - '{{ config_downloads }}:/downloads'
      - '{{ config_tv }}:/tv'
      - '/etc/localtime:/etc/localtime:ro'
    ports:
      - 8989:8989
    state: started
    restart_policy: always
