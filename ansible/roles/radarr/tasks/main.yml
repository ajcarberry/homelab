---

- name: Set EFS mount point to {{ efs_mount_stage }}
  set_fact:
    efs_mount: "{{ efs_mount_stage }}"
  when: env == "stage"

- name: Set EFS mount point to {{ efs_mount_prod }}
  set_fact:
    efs_mount: "{{ efs_mount_prod }}"
  when: env == "prod"

## Create radarr user and group
- name: Create radarr group
  group:
    name: "{{ radarr_group }}"
    state: present
    gid: "{{ radarr_id }}"

- name: Create radarr user
  user:
    name: "{{ radarr_user }}"
    shell: /bin/bash
    state: present
    uid: "{{ radarr_id }}"
    group: "{{ radarr_group }}"

## Create downloaders group and add radarr to it
- name: Create downloader group
  group:
    name: "{{ downloader_group }}"
    state: present
    gid: "{{ downloader_id }}"

- name: Modify radarr user
  user:
    name: "{{ radarr_user }}"
    groups: "{{ downloader_group }}"

## Mount shared EFS for Plex config
- name: "Create shared NFS mount point"
  file:
    state: directory
    path: "{{ config_root }}"
    mode: 0755

- name: "Mount shared EFS as NFS"
  mount:
    name: "{{ config_root }}"
    src: "{{ efs_mount }}/"
    state: mounted
    fstype: nfs
    opts: "nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport"

- name: Ensure that Docker waits for EFS to be mounted before starting
  lineinfile:
    dest: /lib/systemd/system/docker.service
    backrefs: True
    state: present
    regexp: '(^After=((?!mnt-EFS.mount).)*$)'
    line: '\1 mnt-EFS.mount'

- name: Ensure that Docker fails if EFS mount fails
  lineinfile:
    dest: /lib/systemd/system/docker.service
    backrefs: True
    state: present
    regexp: '(^Requires=((?!mnt-EFS.mount).)*$)'
    line: '\1 mnt-EFS.mount'

- name: Create radarr config directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
    owner: "{{ radarr_user }}"
    group: "{{ downloader_group }}"
  with_items:
    - "{{ config_radarr_shared }}"
    - "{{ config_radarr_shared }}/config"
    - "{{ config_radarr_local }}/config"

- name: Check if local Radarr config exists
  stat:
    path: "{{ config_radarr_local }}/config/config.xml"
  register: radarr_config

- name: Synchronize radarr local and shared config
  synchronize:
    src: "{{ config_radarr_shared }}/config"
    dest: "{{ config_radarr_local }}"
  delegate_to: "{{ inventory_hostname }}"
  when: radarr_config.stat.exists == False

- name: Import Radarr config backup script
  template:
    src: radarr_backup.sh.j2
    dest: "{{ config_radarr_local }}/radarr_backup.sh"
    mode: 0755
    owner: "{{ radarr_user }}"
    group: "{{ radarr_group }}"

- name: Cron job to backup radarr config
  cron:
    name: "backup radarr config"
    special_time: hourly
    job: "{{ config_radarr_local }}/radarr_backup.sh"

- name: Create shared directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
  with_items:
    - "{{ config_downloads }}"
    - "{{ config_movies }}"

## Download, configure, and deploy radarr container
- name: Pull the radarr docker image
  docker_image:
    name: "linuxserver/radarr"

- name: Start the radarr docker container
  docker_container:
    image: "linuxserver/radarr"
    name: "{{ docker_radarr_container_name }}"
    env:
      PUID: "{{ radarr_id }}"
      PGID: "{{ downloader_id }}"
      TZ: 'America/New_York'
    volumes:
      - '{{ config_radarr_local }}/config:/config'
      - '{{ config_downloads }}:/downloads'
      - '{{ config_movies }}:/movies'
      - '/etc/localtime:/etc/localtime:ro'
    ports:
      - 7878:7878
    state: started
    restart_policy: always
